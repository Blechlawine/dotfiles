{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "solid component with typescript without props": {
        "prefix": "solidts",
        "body": [
            "import type { Component } from \"solid-js\"",
            "",
            "const ${TM_FILENAME_BASE}: Component = () => {",
            "\treturn (",
            "\t\t<>$0",
            "\t\t</>",
            "\t);",
            "}",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "scaffolds solid component with typescript without props"
    },
    "solid component with typescript": {
        "prefix": "solidtsprops",
        "body": [
            "import type { Component } from \"solid-js\"",
            "",
            "type TProps = {",
            "\t",
            "};",
            "",
            "const ${TM_FILENAME_BASE}: Component<TProps> = (props) => {",
            "\treturn (",
            "\t\t<>$0",
            "\t\t</>",
            "\t);",
            "}",
            "export default ${TM_FILENAME_BASE};"
        ],
        "description": "scaffolds solid component with typescript"
    }
}
